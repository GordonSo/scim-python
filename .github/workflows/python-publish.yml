# This workflows will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: Upload Python Package

on:
  pull_request:
    branches: [ master ]
#   push:
#     branches: [ master ]

jobs:

  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: '3.x'

    - name: Install poetry
      run: |
        curl -fsS -o get-poetry.py https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py
        python get-poetry.py -y
        export PATH="$HOME/.poetry/bin:$PATH"
        source $HOME/.poetry/env

    - name: Configure poetry
      run: poetry config virtualenvs.in-project true

    - name: Set up cache
      uses: actions/cache@v1
      id: cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      run: poetry run pip --version >/dev/null 2>&1 || rm -rf .venv

    - name: Install Dependencies
      run: poetry install

    - name: Run tests
      run: |
        poetry run black . --check
        poetry run isort . --check
        poetry run mypy ./scimschema ./tests
        poetry run pytest
        poetry build
        poetry config repositories.testpypi https://test.pypi.org/legacy/
        poetry publish -r testpypi

    - name: Publish
      env:
        PYPI_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        poetry config pypi-token.pypi $PYPI_TOKEN
        poetry publish  --build

#     - name: Publish distribution ðŸ“¦ to PyPI
#       if: startsWith(github.ref, 'refs/tags')
#       uses: pypa/gh-action-pypi-publish@master
#       with:
#         password: ${{ secrets.PYPI_API_TOKEN }}

  release:
    name: Create Release
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@master

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: $(cat /home/runner/work/scimschema/VERSION)
        release_name: Release $(cat /home/runner/work/scimschema/VERSION)
        body: |
          Changes in this Release
        draft: true
        prerelease: true