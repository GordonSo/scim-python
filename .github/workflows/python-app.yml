# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Get full python version
      id: full-python-version
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

    - name: Install poetry
      run: |
        curl -fsS -o get-poetry.py https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py
        python get-poetry.py -y


    - name: Configure poetry
      run: |
        source $HOME/.poetry/env
        poetry config virtualenvs.in-project true

    - name: Set up cache
      uses: actions/cache@v1
      id: cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      run: |
        source $HOME/.poetry/env
        poetry run pip --version >/dev/null 2>&1 || rm -rf .venv

    - name: Install Dependencies
      run: |
        source $HOME/.poetry/env
        poetry install

    - name: Run tests
      run: |
        source $HOME/.poetry/env
        poetry run black . --check
        poetry run isort . --check
        poetry run mypy ./scimschema ./tests
        poetry run pytest